pipeline {
    agent any

    environment {
        DOCKER_USER   = 'natalia232002!'  // ← Twoja nazwa z DockerHub
        DOCKER_DIR    = 'NI409877/sprawozdanie2'
        BUILDER_IMG   = "${DOCKER_USER}/irssi-builder:${BUILD_NUMBER}"
        RUNTIME_IMG   = "${DOCKER_USER}/irssi-runtime:${BUILD_NUMBER}"
        TAR_NAME      = "irssi-${BUILD_NUMBER}.tar.gz"
    }

    stages {
        stage('Checkout') {
            steps { checkout scm }
        }

        stage('Build ➜ builder image') {
            steps {
                sh """
                    docker build --target builder \
                        -t ${BUILDER_IMG} \
                        -f ${DOCKER_DIR}/Dockerfile \
                        ${DOCKER_DIR}
                """
            }
        }

        stage('Build ➜ runtime image') {
            steps {
                sh """
                    docker build --target runtime \
                        -t ${RUNTIME_IMG} \
                        -f ${DOCKER_DIR}/Dockerfile \
                        ${DOCKER_DIR}
                """
            }
        }

        stage('Smoke-test runtime') {
            steps {
                sh "docker run --rm ${RUNTIME_IMG} --version"
            }
        }

        stage('Package ➜ tar.gz artifact') {
            steps {
                sh """
                    cid=\$(docker create ${BUILDER_IMG})
                    mkdir -p .out
                    docker cp \${cid}:/usr .out/
                    docker rm \${cid}
                    tar -czf ${TAR_NAME} -C .out usr
                """
            }
        }

        stage('Publish images') {
            environment {
                DOCKERHUB = credentials('dockerhub-credentials') // login + token
            }
            steps {
                script {
                    docker.withRegistry('', 'dockerhub-credentials') {
                        docker.image("${BUILDER_IMG}").push()
                        docker.image("${RUNTIME_IMG}").push()
                    }
                }
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: '**/test.log', allowEmptyArchive: true
            junit testResults: '**/builddir/meson-logs/*.xml', allowEmptyResults: true
            archiveArtifacts artifacts: "${TAR_NAME}", allowEmptyArchive: false
        }
    }
}
