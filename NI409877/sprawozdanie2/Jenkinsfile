pipeline {
    agent any

    environment {
        DOCKER_USER = 'natalia--r'
        DOCKER_DIR  = 'NI409877/sprawozdanie2'
        BUILDER_IMG = "${DOCKER_USER}/irssi-builder:${BUILD_NUMBER}"
        RUNTIME_IMG = "${DOCKER_USER}/irssi-runtime:${BUILD_NUMBER}"
        TAR_NAME    = "irssi-${BUILD_NUMBER}.tar.gz"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        // Budowanie obu obrazów w jednej komendzie
        stage('Build ➜ builder & runtime') {
            steps {
                sh """
                  docker build \
                      --target builder -t ${BUILDER_IMG} \
                      --target runtime -t ${RUNTIME_IMG} \
                      -f ${DOCKER_DIR}/Dockerfile \
                      ${DOCKER_DIR}
                """
            }
        }

        // Smoke-test uruchamianie irssi
        stage('Smoke-test runtime') {
            steps {
                sh """
                  docker run --rm ${RUNTIME_IMG} irssi --version
                """
            }
        }

        // Pakowanie artefaktu
        stage('Package ➜ tar.gz artifact') {
            steps {
                sh """
                cid=\$(docker create ${BUILDER_IMG})
                mkdir -p .out
                docker cp \${cid}:/usr .out/
                docker rm \${cid}

                tar -czf ${TAR_NAME} -C .out usr 
                """
            }
        }

        // Publikowanie obrazów do DockerHub
        stage('Publish images') {
            environment {
                DOCKERHUB = credentials('dockerhub-creds')
            }
            steps {
                sh """
                echo \$DOCKERHUB_PSW | docker login \
                        -u \$DOCKERHUB_USR --password-stdin

                docker push ${BUILDER_IMG}
                docker push ${RUNTIME_IMG}
                """
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: '**/test.log', allowEmptyArchive: true
            junit testResults: '**/builddir/meson-logs/*.xml', allowEmptyResults: true
            archiveArtifacts artifacts: "${TAR_NAME}", allowEmptyArchive: false
        }
    }
}
