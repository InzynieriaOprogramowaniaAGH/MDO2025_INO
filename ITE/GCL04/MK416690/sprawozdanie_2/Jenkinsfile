pipeline {
    agent any

    environment {
        DOCKER_HOST = "tcp://docker:2376"
        DOCKER_CERT_PATH = "/certs/client"
        DOCKER_TLS_VERIFY = "1"
        APP_DIR = "ITE/GCL04/MK416690/sprawozdanie_2"
        BUILD_IMAGE = "cpm_build"
        TEST_IMAGE = "cpm_test"
        DEPLOY_IMAGE = "cpm_deploy"
    }

    stages {
        stage('Logs') {
            steps {
                dir(env.APP_DIR) {
                    sh 'mkdir -p logs'
                }
            }
        }

        stage('Build') {
            steps {
                dir(env.APP_DIR){
                    script{
                        try{
                            sh "pwd && ls -l"
                            sh "docker build -t ${BUILD_IMAGE} -f Dockerfile.cpmbuild . > logs/build.log 2>&1"
                        } finally{
                            archiveArtifacts artifacts: 'logs/build.log', allowEmptyArchive: true
                        }
                    }
                }
            }
        }

        stage('Test') {
            steps {
                dir(env.APP_DIR) {
                    script{
                        try{
                            sh 'docker build -t ${TEST_IMAGE} -f Dockerfile.cpmtest . > logs/test.log 2>&1'
                            sh 'docker run --rm ${TEST_IMAGE}'
                        } finally{
                            archiveArtifacts artifacts: 'logs/test.log', allowEmptyArchive: true
                        }
                    }
                    
                }
            }
        }

        stage('Deploy') {
            steps {
                dir(env.APP_DIR) {
                    sh """
                        docker build -t ${DEPLOY_IMAGE} -f Dockerfile.cpmdeploy .
                        docker run -d --name cpm_app -p 3000:3000 ${DEPLOY_IMAGE}
                        sleep 5
                    """
                }
            }
        }

        stage('Test Deploy') {
            steps {
                dir(env.APP_DIR) {
                    sh """
                        docker exec cpm_app curl -s http://localhost:3000 || (echo 'Smoke test failed' && false)
                    """  
                }
            }
        }

        stage('Publish') {
            steps {
                dir(env.APP_DIR) {
                    sh """
                        mkdir -p artifacts
                        docker save ${BUILD_IMAGE} -o artifacts/cpm_build.tar
                    """
                    archiveArtifacts artifacts: 'artifacts/cpm_build.tar', fingerprint: true
                }
            }
        }
    }

    post {
        always {
            sh "docker container rm -f cpm_app || true"
            sh "docker image rm ${BUILD_IMAGE} ${TEST_IMAGE} || true"
            sh "docker system prune -af || true"
        }
    }
}
