pipeline {
  agent any

  parameters {
    booleanParam(name: 'PUBLISH', defaultValue: false, description: 'Push built image to Docker Hub')
  }

  environment {
    IMAGE_NAME     = "skwasny/myapp"
    BUILD_TAG      = "${env.BUILD_NUMBER}"
    DOCKER_CONTEXT = "MDO2025_INO/ITE/GCL04/SK417309/Sprawozdanie2"
    APP_PORT       = "8080"
  }

  stages {
    stage('Clone & Checkout') {
      steps {
        cleanWs(deleteDirs: true)
        dir('MDO2025_INO') {
          git url: 'https://github.com/InzynieriaOprogramowaniaAGH/MDO2025_INO.git',
              branch: 'SK417309'
        }
      }
    }

    stage('Build image (Dependencies)') {
      steps {
        dir(env.DOCKER_CONTEXT) {
          sh """
            docker build --no-cache \
              -f Dockerfile.build \
              -t ${IMAGE_NAME}:builder-${BUILD_TAG} \
              .
          """
        }
      }
    }

    stage('Test image') {
      steps {
        dir(env.DOCKER_CONTEXT) {
          sh """
            mkdir -p target/surefire-reports

            docker build --no-cache \
              -f Dockerfile.test \
              -t ${IMAGE_NAME}:tester-${BUILD_TAG} \
              .
            docker run --rm \
              --user \$(id -u):\$(id -g) \
              -v ${env.WORKSPACE}/${env.DOCKER_CONTEXT}/target:/workspace/target \
              ${IMAGE_NAME}:tester-${BUILD_TAG} mvn test -B
          """
        }
      }
      post {
        always {
          junit "${env.DOCKER_CONTEXT}/target/surefire-reports/*.xml"
          sh "rm -rf ${env.DOCKER_CONTEXT}/target || true"
        }
      }
    }

    stage('Deploy container') {
      steps {
        dir(env.DOCKER_CONTEXT) {
          sh """
            docker rm -f mydb || true
            docker network rm myapp-net || true

            docker network create myapp-net || true

            docker run -d \
              --name mydb \
              --network myapp-net \
              -e MYSQL_ROOT_PASSWORD= \
              -e MYSQL_DATABASE=teacher_management_2 \
              -p 3306:3306 \
              mysql:8.0

            docker build --no-cache \
              --build-arg BUILD_TAG=${BUILD_TAG} \
              -f Dockerfile.deploy \
              -t ${IMAGE_NAME}:prod-${BUILD_TAG} \
              .

            docker rm -f myapp || true

            docker run -d \
              --name myapp \
              --network myapp-net \
              -e SPRING_DATASOURCE_URL=jdbc:mysql://mydb:3306/teacher_management_2 \
              -e SPRING_DATASOURCE_USER=root \
              -e SPRING_DATASOURCE_PASSWORD=root \
              -p ${APP_PORT}:${APP_PORT} \
              ${IMAGE_NAME}:prod-${BUILD_TAG}

            for i in \$(seq 1 10); do
              if curl -fs http://localhost:${APP_PORT}; then
                echo "Application is up"
                exit 0
              fi
              echo "Waiting for app to come upâ€¦ (\$i/10)"
              sleep 5
            done
            echo "Application failed to start."
            docker logs myapp
            exit 1
          """
        }
      }
    }

    stage('Publish to Docker Hub') {
      when { expression { params.PUBLISH } }
      steps {
        withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
          sh """
            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
            docker push ${IMAGE_NAME}:prod-${BUILD_TAG}
            docker tag ${IMAGE_NAME}:prod-${BUILD_TAG} ${IMAGE_NAME}:latest
            docker push ${IMAGE_NAME}:latest
          """
        }
      }
    }
  }

  post {
    cleanup {
      sh 'docker rm -f myapp mydb || true'
      sh 'docker network rm myapp-net || true'
      sh 'docker volume prune -f || true'
      sh """
        docker rmi -f ${IMAGE_NAME}:builder-${BUILD_TAG} || true
        docker rmi -f ${IMAGE_NAME}:tester-${BUILD_TAG} || true
      """
      
      cleanWs(deleteDirs: true)
    }
  }
}
