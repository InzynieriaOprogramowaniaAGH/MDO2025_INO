pipeline {
    agent any

    environment {
        PROJECT_DIR = 'ITE/GCL06/DR416985/lab5'
        IMAGE_BUILD = 'node-build-image'
        IMAGE_TEST = 'node-test-image'
        IMAGE_DEPLOY = 'node-deploy-image'
        VERSION = "v${BUILD_NUMBER}"
        IMAGE_TAG = "winterwollf/node-deploy:v${BUILD_NUMBER}"
    }

    stages {
        stage('Clone') {
            steps {
                git branch: 'DR416985', url: 'https://github.com/InzynieriaOprogramowaniaAGH/MDO2025_INO.git'
            }
        }

        stage('Clean') {
            steps {
                sh '''
                    docker container ls -a -q | xargs -r docker rm -f
                    docker volume ls -q | xargs -r docker volume rm -f
                    docker network ls -q --filter type=custom | xargs -r docker network rm -f
                    docker builder prune --all --force
                    docker images -q | sort -u | grep -vE '^(node:22\\.10|node:22\\.10-slim)$' | xargs -r docker rmi -f
                '''
            }
        }

        stage('Build') {
            steps {
                dir("${PROJECT_DIR}") {
                    sh 'docker build -t ${IMAGE_BUILD} -f node-build.Dockerfile .'
                }
            }
        }

        stage('Test') {
            steps {
                dir("${PROJECT_DIR}") {
                    sh 'docker build -t ${IMAGE_TEST} -f node-test.Dockerfile .'
                    sh 'docker run --rm ${IMAGE_TEST}'
                }
            }
        }

        stage('Deploy') {
            steps {
                dir("${PROJECT_DIR}") {
                    sh 'docker build -t ${IMAGE_DEPLOY} -f node-deploy.Dockerfile .'
                    sh 'docker rm -f app || true'
                    sh 'docker run -d -p 3000:3000 --name app ${IMAGE_DEPLOY}'
                }
            }
        }

        stage('Verify') {
            steps {
                sh 'sleep 15'  // Zwiększony czas oczekiwania na aplikację
                sh 'docker logs app'  // Sprawdzanie logów aplikacji
                sh 'docker inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}" app'  // Pobranie adresu IP kontenera
                sh 'curl -f http://$(docker inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}" app):3000'  // Sprawdzanie dostępności aplikacji przez IP kontenera
            }
        }
    }

    post {
        success {
            echo 'Pipeline zakończony sukcesem.'
        }
        failure {
            echo 'Pipeline zakończony niepowodzeniem.'
        }
    }
}
