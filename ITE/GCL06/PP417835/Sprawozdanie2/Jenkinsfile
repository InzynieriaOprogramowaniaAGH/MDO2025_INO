pipeline {
    agent any

    environment {
        IMAGE_CURL_BUILD = 'curl-build'
        IMAGE_CURL_TEST = 'curl-test'
        IMAGE_CURL_FINAL = 'curl-final'
        VERSION = "v${BUILD_NUMBER}"
        ZIP_NAME = "curl-${BUILD_NUMBER}.tar"
    }

    stages {
        stage('Klonowanie repozytorium') {
            steps {
                echo 'Klonuję projekt'
                sh '''
                    rm -rf MDO2025_INO
                    git clone https://github.com/InzynieriaOprogramowaniaAGH/MDO2025_INO.git
                    cd MDO2025_INO
                    git checkout PP417835
                '''
            }
        }

        stage('Build') {
            steps {
                dir('MDO2025_INO/ITE/GCL06/PP417835/curl') {
                    sh "docker build -f Dockerfile.curlbld -t ${IMAGE_CURL_BUILD} ."
                }
            }
        }

        stage('Test') {
            steps {
                dir('MDO2025_INO/ITE/GCL06/PP417835/curl') {
                    sh '''
                        docker build -f Dockerfile.curltest -t ${IMAGE_CURL_TEST} .
                        docker run --rm ${IMAGE_CURL_TEST}
                    '''
                }
            }
        }

        stage('Deploy') {
            steps {
                dir('MDO2025_INO/ITE/GCL06/PP417835/curl') {
                    sh '''
                        docker build -f Dockerfile.deploy -t ${IMAGE_CURL_FINAL}:${VERSION} .
                        docker run --rm ${IMAGE_CURL_FINAL}:${VERSION} curl --version
                    '''
                }
            }
        }

        stage('Smoke Test') {
            steps {
                echo 'Smoke test do www.metal.agh.edu.pl'
                sh '''
                    docker run --rm ${IMAGE_CURL_FINAL}:${VERSION} curl -s --fail http://www.metal.agh.edu.pl \
                        && echo "SMOKE TEST PASSED" \
                        || echo "SMOKE TEST FAILED"
                '''
            }
        }

        
    }

    post {
        always {
            echo 'Czyszczenie zasobów'
            sh '''
                docker container prune -f
                docker image prune -f
            '''
        }
    }
}