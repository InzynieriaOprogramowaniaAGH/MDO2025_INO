pipeline {
    agent any

    environment {
        IMAGE_CURL_BUILD = 'curl_build'
        IMAGE_CURL_TEST = 'curl_test'
        IMAGE_CURL_DEPLOY_SMOKE_PUBLISH = 'curl_deploy_smoke_publish'
        VERSION = "v${BUILD_NUMBER}"
        ZIP_NAME = "curl_${BUILD_NUMBER}.tar"
    }

    stages {
        stage('Clone Repository') {
            steps {
                echo 'Klonowanie tylko jednej gałęzi'
                sh '''
                rm -rf MDO2025_INO
                git clone --branch PP417835 --single-branch https://github.com/InzynieriaOprogramowaniaAGH/MDO2025_INO.git
                '''
            }
        }

        stage('Build') {
            steps {
                echo 'Budowanie obrazu BUILD'
                sh """
                    docker build \
                        -f MDO2025_INO/ITE/GCL06/PP417835/Sprawozdanie2/Dockerfiles/Dockerfile.curlbld \
                        -t ${IMAGE_CURL_BUILD} \
                        MDO2025_INO/ITE/GCL06/PP417835/curl
                """
            }
        }

        stage('Test') {
            steps {
                echo 'Testowanie obrazu TEST'
                sh """
                    docker build \
                        -f MDO2025_INO/ITE/GCL06/PP417835/Sprawozdanie2/Dockerfiles/Dockerfile.curltest \
                        -t ${IMAGE_CURL_TEST} \
                        MDO2025_INO/ITE/GCL06/PP417835/curl

                    docker run --rm ${IMAGE_CURL_TEST}
                """
            }
        }

        stage('Deploy') {
            steps {
                echo 'Budowanie obrazu DEPLOY'
                sh """
                    docker build \
                        -f MDO2025_INO/ITE/GCL06/PP417835/Sprawozdanie2/Dockerfiles/Dockerfile.deploy \
                        -t ${IMAGE_CURL_DEPLOY_SMOKE_PUBLISH}:${VERSION} \
                        MDO2025_INO/ITE/GCL06/PP417835/curl

                    docker run --rm ${IMAGE_CURL_DEPLOY_SMOKE_PUBLISH}:${VERSION} curl --version
                """
            }
        }

        stage('Smoke Test') {
            steps {
                echo 'Smoke test do www.metal.agh.edu.pl'
                sh """
                    docker run --rm ${IMAGE_CURL_DEPLOY_SMOKE_PUBLISH}:${VERSION} curl -s --fail http://www.metal.agh.edu.pl \
                        && echo "SMOKE TEST PASSED" \
                        || echo "SMOKE TEST FAILED"
                """
            }
        }

        stage('Publish') {
            steps {
                echo 'Utworzenie archiwum i publikacja w Docker Hub'
                
                sh """
                    docker save ${IMAGE_CURL_DEPLOY_SMOKE_PUBLISH}:${VERSION} -o ${ZIP_NAME}
                """

                archiveArtifacts artifacts: "${ZIP_NAME}", onlyIfSuccessful: true

                withCredentials([usernamePassword(
                    credentialsId: 'pawpodw-dockerhub',
                    usernameVariable: 'DOCKER_USER',
                    passwordVariable: 'DOCKER_PASS'
                )]) {
                    sh """
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                        docker tag ${IMAGE_CURL_DEPLOY_SMOKE_PUBLISH}:${VERSION} pawpodw2/curl_publish:${VERSION}
                        docker push pawpodw2/curl_publish:${VERSION}
                    """
                }
            }
        }
    }

    post {
        always {
            echo 'Czyszczenie kontenerów i obrazów'
            sh '''
                docker container prune -f
                docker image prune -f
            '''
        }
    }
}
