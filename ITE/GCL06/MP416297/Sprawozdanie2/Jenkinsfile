pipeline {
    agent any

    stages {
        stage('Clean Workspace') {
            steps {
                script {
                    cleanWs()
                    sh 'docker system prune -af --volumes'
                }
            }
        }
        
        stage('Clone repo') {
            steps {
                sh "git clone -b MP416297 --single-branch https://github.com/InzynieriaOprogramowaniaAGH/MDO2025_INO.git "
                sh "pwd"
                sh "ls"
            }
        }
        
        stage('Build') {
            steps{
                sh "docker build -t supertuxbld -f ./MDO2025_INO/ITE/GCL06/MP416297/Sprawozdanie2/supertux_dockerfiles/Dockerfile.bld ."
            }
        }
        
        stage('Test') {
            steps{
                sh "docker build -t supertuxtest -f ./MDO2025_INO/ITE/GCL06/MP416297/Sprawozdanie2/supertux_dockerfiles/Dockerfile.test ."
            }
        }
        
        stage('Deploy') {
            steps {
                script{
                    sh "docker volume create supertux_build"
                    sh '''
                        docker run --rm -v supertux_build:/supertux_build supertuxbld bash -c "
                            cd ../../ && 
                            rm -rf supertux_build/* &&
                            cp -r supertux/build supertux_build/build
                            cp -r supertux/data supertux_build/data
                            cp -r supertux/external supertux_build/external
                        "
                    '''

                    sh "docker build -t main_container -f ./MDO2025_INO/ITE/GCL06/MP416297/Sprawozdanie2/supertux_dockerfiles/Dockerfile.maincontainer ."
                    sh '''
                            docker run --name main -v supertux_build:/supertux_build main_container bash -c "
                                mkdir supertux &&
                                cp -r supertux_build/* ./supertux/ &&
                                cd supertux &&
                                cd build &&
                                ./supertux2 --version"
                    '''
                    def logs = sh(script: "docker logs main", returnStdout: true).trim()
                        
                    // Wyświetlenie logów w konsoli Jenkins
                    echo "Docker logs: ${logs}"
                    
                    // Usunięcie kontenera po zakończeniu
                    sh 'docker rm main'
                }
                
            }
        }

        stage('Build DEB Package') {
            steps {
                script {
                    // Tworzenie struktury katalogów dla paczki DEB
                    sh '''
                        docker run --rm -v supertux_build:/supertux_build -v ${WORKSPACE}/backup:/backup supertuxbld -c "cp -r /supertux_build/* /backup/"
                        tar -czf ${WORKSPACE}/backup/supertux_build.tar.gz -C ${WORKSPACE}/backup .
                    '''
                }
            }
        }

        stage('Publish DEB Package') {
            steps {
                script {
                    // Publikowanie paczki DEB jako artefakt
                    archiveArtifacts artifacts: "${DEB_DIR}.deb", allowEmptyArchive: false
                }
            }
        }
        
        // stage('Publish') {
        //     steps {
        //         script {
        //             def artifactName = "supertux_deploy_${currentBuild.timestamp}.zip"
                    
        //             archiveArtifacts artifacts: artifactName, allowEmptyArchive: false
        //         }
        //     }
        // }
    }
}

