pipeline {
    agent any

    environment {
        IMAGE_NAME = "node-js-dummy"
        TAG = "v1.0"
        PATH_PREFIX = "ITE/GCL06/AO417742"
    }

    stages {
        stage('Build') {
            steps {
                echo 'Budowanie obrazu aplikacji'
                sh 'docker build -f ${PATH_PREFIX}/Dockerfile.build.node -t ${IMAGE_NAME}:build ${PATH_PREFIX}'
            }
        }

        stage('Test') {
            steps {
                echo 'Testowanie aplikacji'
                sh 'docker build -f ${PATH_PREFIX}/Dockerfile.test.node -t ${IMAGE_NAME}:test ${PATH_PREFIX}'
                sh 'docker run --rm ${IMAGE_NAME}:test'
            }
        }

        stage('Deploy') {
            steps {
                echo 'Uruchamianie aplikacji'
                sh 'docker build -f ${PATH_PREFIX}/Dockerfile.deploy.node -t ${IMAGE_NAME}:${TAG} ${PATH_PREFIX}'
                sh 'docker run -d -p 3000:3000 --name ${IMAGE_NAME}_container ${IMAGE_NAME}:${TAG}'
                sh 'sleep 5'
                sh 'curl http://localhost:3000 || echo "Aplikacja nie odpowiada"'
            }
        }

        stage('Publish') {
            steps {
                echo 'Archiwizowanie aplikacji'
                sh 'mkdir -p artifacts'
                sh 'docker cp ${IMAGE_NAME}_container:/app ./artifacts/app || echo "Brak danych do kopiowania"'
                sh 'zip -r artifacts/node-app.zip artifacts/app || echo "Nie udało się spakować"'
                archiveArtifacts artifacts: 'artifacts/**', fingerprint: true
            }
        }
    }

    post {
        always {
            echo 'Czyszczenie środowiska'
            sh 'docker stop ${IMAGE_NAME}_container || true'
            sh 'docker rm ${IMAGE_NAME}_container || true'
            sh 'docker image prune -f || true'
        }
    }
}
