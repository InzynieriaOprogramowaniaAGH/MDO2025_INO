pipeline {
    agent any
    environment {
    DOCKER_IMAGE = 'zbogenza/express-app:latest'
    }   
    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'WS417336', url: 'https://github.com/InzynieriaOprogramowaniaAGH/MDO2025_INO.git'
            }
        }
        
        stage('Cleaning') {
            steps {
                dir('ITE/GCL08/WS417336/Sprawozdanie2') {
                    sh 'docker rmi -f express-build'
                    sh 'docker rmi -f express-app'
                    sh 'docker builder prune --force --all'
                    sh 'docker stop app || true'
                    sh 'docker rm app || true'
                    sh 'docker network inspect ci >/dev/null 2>&1 && docker network rm ci || true'
                }
            }
        }
        
        stage('Build Dockerfile') {
            steps {
                dir('ITE/GCL08/WS417336/Sprawozdanie2') {
                    sh 'docker build --no-cache -f Dockerfiles/Dockerfile.expressbuild -t express-build .'
                }
            }
        }
        
        stage('Publish Dockerfile') {
            steps {
                dir('ITE/GCL08/WS417336/Sprawozdanie2') {
                    sh 'docker build --no-cache -f Dockerfiles/Dockerfile.expresspublish -t express-app .'
                }
            }
        }

        stage('Test Dockerfile') {
            steps {
                dir('ITE/GCL08/WS417336/Sprawozdanie2') {
                    sh 'docker build --no-cache -f Dockerfiles/Dockerfile.expresstest -t express-test .'
                    sh 'docker run --rm express-test'
                }
            }
        }
        
        stage('Run app') {
            steps {
                dir('ITE/GCL08/WS417336/Sprawozdanie2') {
                    sh 'docker network create ci'
                    sh 'docker run --rm -d --network ci --name app -p 3000:3000 express-app'
                    sh 'docker run --rm --network ci fedora curl -s app:3000'
                }
            }
        }

        stage('Docker Login and Push') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials2', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh 'echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin'
                    sh 'docker tag express-app $DOCKER_IMAGE'
                    sh 'docker push $DOCKER_IMAGE'
                }
            }
        }
    }
}
