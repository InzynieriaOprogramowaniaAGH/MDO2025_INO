pipeline {
    agent any

    environment {
        IMAGE_CURL_BUILD = 'curl-build'
        IMAGE_CURL_TEST = 'curl-test'
        IMAGE_CURL_FINAL = 'curl-final'
        VERSION = "v${BUILD_NUMBER}"
        ZIP_NAME = "curl-${BUILD_NUMBER}.tar"
    }

    stages {
        stage('Klonowanie repozytorium') {
            steps {
                echo 'Klonuję projekt'
                sh '''
                    rm -rf MDO2025_INO
                    git clone https://github.com/InzynieriaOprogramowaniaAGH/MDO2025_INO.git
                    cd MDO2025_INO
                    git checkout BS416365
                '''
            }
        }

        stage('Build') {
            steps {
                dir('MDO2025_INO/ITE/GCL07/BS416365/curl') {
                    sh "docker build -f Dockerfile.curlbld -t ${IMAGE_CURL_BUILD} ."
                }
            }
        }

        stage('Test') {
            steps {
                dir('MDO2025_INO/ITE/GCL07/BS416365/curl') {
                    sh '''
                        docker build -f Dockerfile.curltest -t ${IMAGE_CURL_TEST} .
                        docker run --rm ${IMAGE_CURL_TEST}
                    '''
                }
            }
        }

        stage('Deploy') {
            steps {
                dir('MDO2025_INO/ITE/GCL07/BS416365/curl') {
                    sh '''
                        docker build -f Dockerfile.deploy -t ${IMAGE_CURL_FINAL}:${VERSION} .
                        docker run --rm ${IMAGE_CURL_FINAL}:${VERSION}                    '''
                }
            }
        }

        stage('Smoke Test') {
            steps {
                echo 'Smoke test do www.metal.agh.edu.pl'
                sh '''
                    docker run --rm ${IMAGE_CURL_FINAL}:${VERSION}
                '''
            }
        }

        stage('Publish') {
            steps {
                echo 'Publikacja obrazu do archiwum'
                sh '''
                    docker save ${IMAGE_CURL_FINAL}:${VERSION} -o ${ZIP_NAME}
                '''
                archiveArtifacts artifacts: "${ZIP_NAME}", onlyIfSuccessful: true

                withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                        docker tag ${IMAGE_CURL_FINAL}:${VERSION} bskubel/curl-final:${VERSION}
                        docker push bskubel/curl-final:${VERSION}
                    '''
                }
                
            }
        }
    }

    post {
        always {
            echo 'Czyszczenie zasobów'
            sh '''
                docker container prune -f
                docker image prune -f
            '''
        }
    }
}
