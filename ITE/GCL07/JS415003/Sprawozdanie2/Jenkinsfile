pipeline {
    agent any
    
    stages {
        stage('Checkout') {
            steps {
                // Pobranie kodu źródłowego z głównego repozytorium
                git url: 'https://github.com/DaveGamble/cJSON.git', branch: 'master'
                
                // Pobranie plików Dockerfile z repozytorium projektu
                dir('project_files') {
                    git url: 'https://github.com/InzynieriaOprogramowaniaAGH/MDO2025_INO.git', branch: 'main'
                    sh 'git checkout JS415003 || echo "Branch not found, continuing with main"'
                }
                
                // Kopiowanie plików Dockerfile z odpowiedniej struktury katalogów
                sh '''
                mkdir -p dockerfiles
                cp project_files/ITE/GCL07/JS415003/Sprawozdanie2/005-Class/Dockerfile.cjsonbuild dockerfiles/
                cp project_files/ITE/GCL07/JS415003/Sprawozdanie2/005-Class/Dockerfile.cjsontest dockerfiles/
                cp project_files/ITE/GCL07/JS415003/Sprawozdanie2/005-Class/Dockerfile.cjsondeploy dockerfiles/
                cp project_files/ITE/GCL07/JS415003/Sprawozdanie2/005-Class/Dockerfile.cjsonpublish dockerfiles/
                
                # Kopiowanie Dockerfile'i do katalogu głównego projektu
                cp dockerfiles/Dockerfile.cjsonbuild ${WORKSPACE}/
                cp dockerfiles/Dockerfile.cjsontest ${WORKSPACE}/
                cp dockerfiles/Dockerfile.cjsondeploy ${WORKSPACE}/
                cp dockerfiles/Dockerfile.cjsonpublish ${WORKSPACE}/
                '''
                
                // Tworzenie przykładowego pliku C do demonstracji działania biblioteki
                sh '''
                cat > example.c << EOF
                #include <stdio.h>
                #include <stdlib.h>
                #include "cJSON.h"

                int main() {
                    const char *json_string = "{\\\"name\\\":\\\"cJSON\\\", \\\"version\\\":\\\"1.0\\\", \\\"status\\\":\\\"deployed\\\"}";
                    cJSON *json = cJSON_Parse(json_string);
                    
                    if (json == NULL) {
                        printf("Error parsing JSON\\n");
                        return 1;
                    }
                    
                    cJSON *name = cJSON_GetObjectItemCaseSensitive(json, "name");
                    cJSON *version = cJSON_GetObjectItemCaseSensitive(json, "version");
                    cJSON *status = cJSON_GetObjectItemCaseSensitive(json, "status");
                    
                    printf("Library: %s\\nVersion: %s\\nStatus: %s\\n",
                        name->valuestring, version->valuestring, status->valuestring);
                    
                    cJSON_Delete(json);
                    return 0;
                }
                EOF
                '''
            }
        }
        
        stage('Build') {
            steps {
                // Budowanie obrazu Builder
                sh 'docker build -t cjson-build -f Dockerfile.cjsonbuild .'
            }
        }
        
        stage('Test') {
            steps {
                // Uruchomienie testów
                sh 'docker build -t cjson-test -f Dockerfile.cjsontest .'
                sh 'docker run --name cjson-test-container cjson-test || true'
                
                // Zapisanie wyników testów
                sh 'docker cp cjson-test-container:/cjson-build/build/Testing .'
                sh 'docker rm cjson-test-container'
                
                // Archiwizacja wyników testów
                archiveArtifacts artifacts: 'Testing/**/*', fingerprint: true
            }
        }
        
        stage('Deploy') {
            steps {
                // Budowanie i uruchamianie kontenera deploy
                sh 'docker build -t cjson-deploy -f Dockerfile.cjsondeploy .'
                sh 'docker run --rm cjson-deploy > deploy_results.txt'
                
                // Archiwizacja wyników wdrożenia
                archiveArtifacts artifacts: 'deploy_results.txt', fingerprint: true
            }
        }
        
        stage('Publish') {
            steps {
                // Tworzenie katalogu na artefakty
                sh 'mkdir -p output'
                
                // Budowanie i uruchamianie kontenera publish
                sh 'docker build -t cjson-publish -f Dockerfile.cjsonpublish .'
                sh 'docker run --rm -v ${WORKSPACE}/output:/output cjson-publish'
                
                // Archiwizacja pakietu dystrybucyjnego
                archiveArtifacts artifacts: 'output/cjson-dist.tar.gz', fingerprint: true 
            }
        }
    }
    
    post {
        success {
            echo 'Pipeline zakończony sukcesem!'
        }
        failure {
            echo 'Pipeline zakończony niepowodzeniem!'
        }
    }
}