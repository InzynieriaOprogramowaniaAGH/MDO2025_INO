pipeline {
    agent any

    environment {
        MAVEN_OPTS = '-Dmaven.repo.local=.m2/repository'
        BUILD_IMAGE = 'mvn-build'
        TEST_IMAGE = 'mvn-test'
        RUNTIME_IMAGE = 'openjdk:17-slim'
        JAR_NAME = 'app2.jar'
        ARTIFACT_DIR = 'publish'
        DOCKERFILES_DIR = 'INO/GCL01/KK415853/Sprawozdanie2'
    }

    stages {
        stage('Clone repo') {
            steps {
                git branch: 'KK415853', url: 'https://github.com/InzynieriaOprogramowaniaAGH/MDO2025_INO.git'
            }
        }

        stage('Build Image (Dependencies)') {
            steps {
                echo 'Budowanie obrazu buildowego z Dockerfile.build...'
                script {
                    docker.build(env.BUILD_IMAGE, "-f ${env.DOCKERFILES_DIR}/Dockerfile.build ${env.DOCKERFILES_DIR}")
                }
            }
        }

        stage('Extract Artifact') {
            steps {
                echo 'Uruchamianie build-containera i kopiowanie artefaktu JAR...'
                script {
                    docker.image(env.BUILD_IMAGE).inside {
                        sh '''
                            mkdir -p target
                            cp /app/simple-java-maven-app/target/*.jar target/
                        '''
                    }
                }
            }
        }

        stage('Test') {
            steps {
                echo 'Budowanie obrazu testowego i uruchamianie testów...'
                script {
                    def testImage = docker.build(env.TEST_IMAGE, "-f ${env.DOCKERFILES_DIR}/Dockerfile.test ${env.DOCKERFILES_DIR}")
                    testImage.inside {
                       dir('/app/simple-java-maven-app') {
                            sh 'mvn test'
                        }
                    }
                }
                junit '**/target/surefire-reports/*.xml'
            }
        }

        stage('Archive Artifact') {
            steps {
                echo 'Archiwizacja pliku JAR jako artefaktu pipeline...'
                script {
                    def jarFile = sh(script: "ls target/*.jar | head -n 1", returnStdout: true).trim()
                    sh "cp ${jarFile} ${JAR_NAME}"
                }
                archiveArtifacts artifacts: "${JAR_NAME}"
            }
        }

        stage('Deploy') {
            steps {
                echo 'Wdrażanie aplikacji...'
                script {
                    sh '''
                        docker rm -f running-java-app || true
                        docker run -d \
                            --name running-java-app \
                            -v "$PWD/${JAR_NAME}:/app/${JAR_NAME}" \
                            openjdk:17-slim \
                            java -jar /app/${JAR_NAME}
                    '''
                }
            }
        }

        stage('Publish') {
            steps {
                echo 'Przygotowanie artefaktu do publikacji...'
                sh '''
                    mkdir -p ${ARTIFACT_DIR}
                    cp ${JAR_NAME} ${ARTIFACT_DIR}/myapp-1.0.0.jar
                '''
                archiveArtifacts artifacts: "${ARTIFACT_DIR}/*.jar"
            }
        }
    }

    post {
        always {
            echo 'Sprzątanie po pipeline...'
            sh 'docker rm -f running-java-app || true'
        }
    }
}
