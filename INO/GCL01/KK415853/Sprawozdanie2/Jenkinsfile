pipeline {
    agent any
    environment {
        MAVEN_OPTS = '-Dmaven.repo.local=.m2/repository'
        BUILD_IMAGE = 'mvn-build'
        TEST_IMAGE = 'mvn-test'
        RUNTIME_IMAGE = 'openjdk:17-slim'
        JAR_NAME = 'app2.jar'
        ARTIFACT_DIR = 'publish'
        DOCKERFILES_DIR = 'INO/GCL01/KK415853/Sprawozdanie2'
        PROJECT_DIR = 'INO/GCL01/KK415853/Sprawozdanie2/simple-java-maven-app'
    }
    stages {
        stage('Clone repo') {
            steps {
                git branch: 'KK415853', url: 'https://github.com/InzynieriaOprogramowaniaAGH/MDO2025_INO.git'
            }
        }
        stage('Build Builder Image') {
            steps {
                echo 'Budowanie obrazu buildowego z Dockerfile.build...'
                sh "docker build -t ${BUILD_IMAGE} -f ${DOCKERFILES_DIR}/Dockerfile.build ${DOCKERFILES_DIR}"
            }
        }
        stage('Build Test Image') {
            steps {
                echo 'Budowanie obrazu testowego z Dockerfile.test...'
                sh "docker build -t ${TEST_IMAGE} -f ${DOCKERFILES_DIR}/Dockerfile.test ${DOCKERFILES_DIR}"
            }
        }
        stage('Extract Artifact from Builder') {
            steps {
                echo 'Wyciąganie skompilowanego JARa z kontenera builder...'
                sh '''
                    # Uruchom kontener i pobierz jar
                    CONTAINER_ID=$(docker create ${BUILD_IMAGE})
                    docker cp $CONTAINER_ID:/app/simple-java-maven-app/target/my-app-1.0-SNAPSHOT.jar ${JAR_NAME}
                    docker rm $CONTAINER_ID
                '''
                
                // Archiwizacja artefaktu
                archiveArtifacts artifacts: "${JAR_NAME}"
            }
        }
        stage('Run Tests') {
            steps {
                echo 'Uruchamianie testów w kontenerze testowym...'
                sh '''
                    # Uruchom testy w kontenerze testowym
                    TEST_CONTAINER_ID=$(docker create ${TEST_IMAGE})
                    docker start -a $TEST_CONTAINER_ID
                '''
            }
        }
        stage('Deploy') {
            steps {
                echo 'Wdrażanie aplikacji...'
                sh '''
                    docker rm -f running-java-app || true
                    docker run -d \
                        --name running-java-app \
                        -v "$PWD/${JAR_NAME}:/app/${JAR_NAME}" \
                        ${RUNTIME_IMAGE} \
                        java -jar /app/${JAR_NAME}
                '''
            }
        }
        stage('Publish') {
            steps {
                echo 'Przygotowanie artefaktu do publikacji...'
                sh '''
                    mkdir -p ${ARTIFACT_DIR}
                    cp ${JAR_NAME} ${ARTIFACT_DIR}/myapp-1.0.0.jar
                '''
                archiveArtifacts artifacts: "${ARTIFACT_DIR}/*.jar"
            }
        }
    }
    post {
        always {
            echo 'Sprzątanie po pipeline...'
            sh 'docker rm -f running-java-app || true'
        }
    }
}