pipeline {
    agent any

    environment {
        // bazowy katalog Twojego zadania w repo
        BASEDIR    = "INO/GCL02/JK414562"
        WORKDIR    = "${BASEDIR}/pipeline"
        ARTIFACTS  = "${WORKDIR}/artifacts"
        LOGS       = "${WORKDIR}/logs"
    }

    parameters {
        booleanParam(name: 'SKIP_CLONE', defaultValue: false, description: 'Pomiń klonowanie xz')
        booleanParam(name: 'SKIP_BUILD', defaultValue: false, description: 'Pomiń etap build')
    }

    stages {
        stage('Clone xz') {
            when { expression { !params.SKIP_CLONE } }
            steps {
                sh "rm -rf ${WORKDIR}/xz"
                sh "git clone https://github.com/tukaani-project/xz.git ${WORKDIR}/xz"
            }
        }

        stage('Build') {
            when { expression { !params.SKIP_BUILD } }
            steps {
                dir("${WORKDIR}") {
                    script {
                        // Dockerfile.build jest w INO/GCL02/JK414562/pipeline/Dockerfile.build
                        def img = docker.build('xz-build', '-f Dockerfile.build .')
                        def cid = sh(script: "docker create xz-build", returnStdout: true).trim()
                        sh "mkdir -p ${ARTIFACTS}"
                        // w Dockerfile.build masz na końcu:
                        //   RUN make dist && for f in xz-*.tar.gz; do mv \"$f\" xz.tar.gz; done
                        sh "docker cp ${cid}:/app/xz.tar.gz ${ARTIFACTS}/xz.tar.gz"
                        sh "docker rm ${cid}"
                    }
                }
            }
        }

        stage('Test') {
            steps {
                dir("${WORKDIR}") {
                    script {
                        def img = docker.build('xz-test', '-f Dockerfile.test .')
                        def cid = sh(script: "docker create xz-test", returnStdout: true).trim()
                        sh "mkdir -p ${LOGS}"
                        sh "docker cp ${cid}:/app/logs/test_results.log ${LOGS}/test_results.log"
                        sh "docker rm ${cid}"
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                dir("${WORKDIR}") {
                    script {
                        def img = docker.build('xz-deploy', '-f Dockerfile.deploy .')
                        def cid = sh(script: "docker create xz-deploy", returnStdout: true).trim()
                        // kopiujesz swój deploy.c
                        sh "docker cp deploy.c ${cid}:/app/deploy.c"
                        sh "docker start ${cid}"
                        sh "docker exec ${cid} gcc /app/deploy.c -lxz -o /tmp/deploy_test"
                        sh "docker exec ${cid} /tmp/deploy_test"
                        sh "docker rm -f ${cid}"
                    }
                }
            }
        }

        stage('Done') {
            steps {
                echo '✅ Pipeline zakończony pomyślnie.'
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: "${ARTIFACTS}/xz.tar.gz", allowEmptyArchive: true
            archiveArtifacts artifacts: "${LOGS}/test_results.log", allowEmptyArchive: true
        }
    }
}
