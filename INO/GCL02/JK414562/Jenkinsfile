pipeline {
    agent any

    environment {
        // ścieżka do katalogu z Dockerfile.build, Dockerfile.test itd.
        WORKDIR = "INO/GCL02/JK414562/pipeline"
    }

    stages {

        stage('Clone') {
            steps {
                // klonujemy Twoją gałąź
                git branch: 'JK414562', url: 'https://github.com/InzynieriaOprogramowaniaAGH/MDO2025_INO.git'
            }
        }

        stage('Build') {
            steps {
                dir("${WORKDIR}") {
                    script {
                        // budujemy obraz buildowy
                        def buildImage = docker.build('xz-build', '-f Dockerfile.build .')

                        // przygotowujemy katalog na artefakty
                        sh 'mkdir -p artifacts'

                        // tworzymy kontener, kopiujemy gotowy tarball i usuwamy kontener
                        def buildContainer = sh(script: "docker create xz-build", returnStdout: true).trim()
                        sh "docker cp ${buildContainer}:/app/xz.tar.gz artifacts/xz.tar.gz"
                        sh "docker rm ${buildContainer}"
                    }
                }
            }
        }

        stage('Test') {
            steps {
                dir("${WORKDIR}") {
                    script {
                        // budujemy obraz testowy
                        def testImage = docker.build('xz-test', '-f Dockerfile.test .')

                        // katalog na logi
                        sh 'mkdir -p logs'

                        // uruchamiamy kontener, kopiujemy logi i usuwamy kontener
                        def testContainer = sh(script: "docker create xz-test", returnStdout: true).trim()
                        sh "docker cp ${testContainer}:/app/logs/test_results.log logs/xz_test.log"
                        sh "docker rm ${testContainer}"
                    }
                }
            }
        }

        stage('Print') {
            steps {
                echo '✅ Pipeline dla xz zakończony pomyślnie.'
            }
        }
    }

    post {
        always {
            // archiwizujemy tarball i logi
            archiveArtifacts artifacts: "${WORKDIR}/artifacts/xz.tar.gz",   allowEmptyArchive: false
            archiveArtifacts artifacts: "${WORKDIR}/logs/xz_test.log",      allowEmptyArchive: false
        }
    }
}
