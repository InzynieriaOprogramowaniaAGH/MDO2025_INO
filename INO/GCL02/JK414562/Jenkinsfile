pipeline {
    agent any

    environment {
        // katalog, w którym leżą Dockerfile.build, Dockerfile.test i – po klonowaniu – katalog xz/
        WORKDIR = "INO/GCL02/JK414562/pipeline"
    }

    stages {

        stage('Clone xz') {
            steps {
                dir("${WORKDIR}") {
                    // klonujemy kod źródłowy xz wewnątrz pipeline/
                    sh "rm -rf xz"
                    sh "git clone https://github.com/tukaani-project/xz.git xz"
                }
            }
        }

        stage('Build & Package') {
            steps {
                dir("${WORKDIR}") {
                    script {
                        // budujemy obraz buildowy, context = pipeline/
                        def buildImage = docker.build('xz-build', '-f Dockerfile.build .')

                        // przygotowujemy katalog na artefakty
                        sh 'mkdir -p artifacts'

                        // tworzymy kontener (bez uruchamiania), kopiujemy tarball i usuwamy kontener
                        def buildContainer = sh(script: "docker create xz-build", returnStdout: true).trim()
                        sh "docker cp ${buildContainer}:/app/xz.tar.gz artifacts/xz.tar.gz"
                        sh "docker rm ${buildContainer}"
                    }
                }
            }
        }

        stage('Test') {
            steps {
                dir("${WORKDIR}") {
                    script {
                        // budujemy obraz testowy
                        def testImage = docker.build('xz-test', '-f Dockerfile.test .')

                        // katalog na logi
                        sh 'mkdir -p logs'

                        // kopiujemy logi z testów
                        def testContainer = sh(script: "docker create xz-test", returnStdout: true).trim()
                        sh "docker cp ${testContainer}:/app/logs/test_results.log logs/xz_test.log"
                        sh "docker rm ${testContainer}"
                    }
                }
            }
        }

        stage('Print') {
            steps {
                echo '✅ Pipeline dla xz zakończony pomyślnie.'
            }
        }
    }

    post {
        always {
            // archiwizujemy artefakty
            archiveArtifacts artifacts: "${WORKDIR}/artifacts/xz.tar.gz",   allowEmptyArchive: false
            archiveArtifacts artifacts: "${WORKDIR}/logs/xz_test.log",      allowEmptyArchive: false
        }
    }
}
