pipeline {
  agent any

  stages {
    stage('Clone xz') {
      steps {
        // Wyczyść workspace i sklonuj repo
        deleteDir()
        git url: 'https://github.com/tukaani-project/xz.git', branch: 'master'
      }
    }

    stage('Build Image') {
      steps {
        script {
          // budujemy obraz z Dockerfile.build
          docker.build('xz-build', '-f pipeline/Dockerfile.build .')
        }
      }
    }

    stage('Test Image') {
      steps {
        script {
          // budujemy obraz testowy
          docker.build('xz-test', '-f pipeline/Dockerfile.test .')
          // uruchamiamy go jednorazowo, aby wyciągnąć logi
          sh '''
            docker create --name xz-test-container xz-test
            mkdir -p logs
            docker cp xz-test-container:/app/logs/test_results.log logs/test_results.log
            docker rm xz-test-container
          '''
        }
      }
    }

    stage('Package Image') {
      steps {
        script {
          // wyciągamy gotowy tarball z obrazu buildowego
          sh '''
            docker create --name xz-build-container xz-build
            mkdir -p artifacts
            docker cp xz-build-container:/app/xz.tar.gz artifacts/xz.tar.gz
            docker rm xz-build-container
          '''
        }
      }
    }
  }

  post {
    always {
      // archiwizujemy jako artefakty
      archiveArtifacts artifacts: 'artifacts/xz.tar.gz',   allowEmptyArchive: false
      archiveArtifacts artifacts: 'logs/test_results.log', allowEmptyArchive: false
    }
  }
}
