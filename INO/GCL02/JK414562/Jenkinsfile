pipeline {
  agent any

  // niech nie robi automatycznego checkoutu SCM — my go sami zrobimy
  options { skipDefaultCheckout() }

  environment {
    // gdzie leży ten Jenkinsfile w repo
    BASE        = "INO/GCL02/JK414562"
    // branch, z którego bierzemy
    SELF_BRANCH = "JK414562"
    SELF_REPO   = "https://github.com/InzynieriaOprogramowaniaAGH/MDO2025_INO.git"
    // repo z xz
    XZ_REPO     = "https://github.com/tukaani-project/xz.git"

    ARTIFACTS   = "${BASE}/artifacts"
    LOGS        = "${BASE}/logs"
  }

  stages {
    stage("Init: checkout self") {
      steps {
        // pobierz ten sam branch z tego repo, by mieć dostęp do pipeline/ i Jenkinsfile
        checkout([
          $class: 'GitSCM',
          branches: [[ name: "*/${SELF_BRANCH}" ]],
          userRemoteConfigs: [[ url: SELF_REPO ]]
        ])
      }
    }

    stage("Clone xz") {
      steps {
        // sklonuj oficjalne xz obok katalogu pipeline/
        sh """
          rm -rf xz
          git clone ${XZ_REPO} xz
        """
      }
    }

    stage("Build & Package") {
      steps {
        script {
          // budujemy obraz z kontekstem na poziomie workspace (gdzie jest xz/ i pipeline/)
          def img = docker.build(
            "xz-build",
            "-f ${BASE}/pipeline/Dockerfile.build ."
          )

          // przygotuj artefakty
          sh "mkdir -p ${ARTIFACTS}"

          // utwórz kontener, wyciągnij tarball, usuń kontener
          def cid = sh(script: "docker create xz-build", returnStdout: true).trim()
          sh "docker cp ${cid}:/app/xz.tar.gz ${ARTIFACTS}/xz.tar.gz"
          sh "docker rm ${cid}"
        }
      }
    }

    stage("Test") {
      steps {
        script {
          // budujemy obraz testowy
          def img = docker.build(
            "xz-test",
            "-f ${BASE}/pipeline/Dockerfile.test ."
          )

          // przygotuj logi
          sh "mkdir -p ${LOGS}"

          // uruchom kontener, który w ENTRYPOINT wywali testy do /app/logs/xz_test.log
          def cid = sh(script: "docker create xz-test", returnStdout: true).trim()
          sh "docker start -a ${cid}"

          // skopiuj logi i usuń kontener
          sh "docker cp ${cid}:/app/logs/xz_test.log ${LOGS}/xz_test.log"
          sh "docker rm ${cid}"
        }
      }
    }
  }

  post {
    always {
      archiveArtifacts artifacts: "${ARTIFACTS}/xz.tar.gz",   allowEmptyArchive: false
      archiveArtifacts artifacts: "${LOGS}/xz_test.log",      allowEmptyArchive: false
    }
  }
}