pipeline {
    agent any

    environment {
        WORKDIR = "pipeline"
    }

    parameters {
        booleanParam(name: 'SKIP_CLONE', defaultValue: false, description: 'Pomiń klonowanie xz')
        booleanParam(name: 'SKIP_BUILD', defaultValue: false, description: 'Pomiń etap build')
    }

    stages {
        stage('Clone xz') {
            when { expression { !params.SKIP_CLONE } }
            steps {
                // klonujemy tylko katalog xz
                sh "rm -rf ${WORKDIR}/xz"
                sh "git clone https://github.com/tukaani-project/xz.git ${WORKDIR}/xz"
            }
        }

        stage('Build') {
            when { expression { !params.SKIP_BUILD } }
            steps {
                dir("${WORKDIR}") {
                    script {
                        // budujemy obraz, w Dockerfile.build pętla zmienia nazwę paczki na xz.tar.gz
                        docker.build('xz-build', '-f Dockerfile.build .')
                        def cid = sh(script: "docker create xz-build", returnStdout: true).trim()
                        sh 'mkdir -p artifacts'
                        sh "docker cp ${cid}:/app/xz.tar.gz artifacts/xz.tar.gz"
                        sh "docker rm ${cid}"
                    }
                }
            }
        }

        stage('Test') {
            steps {
                dir("${WORKDIR}") {
                    script {
                        docker.build('xz-test', '-f Dockerfile.test .')
                        def cid = sh(script: "docker create xz-test", returnStdout: true).trim()
                        sh 'mkdir -p logs'
                        sh "docker cp ${cid}:/app/logs/test_results.log logs/test_results.log"
                        sh "docker rm ${cid}"
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                dir("${WORKDIR}") {
                    script {
                        docker.build('xz-deploy', '-f Dockerfile.deploy .')
                        def cid = sh(script: "docker create xz-deploy", returnStdout: true).trim()
                        sh "docker cp deploy.c ${cid}:/app/deploy.c"
                        sh "docker start ${cid}"
                        sh "docker exec ${cid} gcc /app/deploy.c -lxz -o /tmp/deploy_test"
                        sh "docker exec ${cid} /tmp/deploy_test"
                        sh "docker rm -f ${cid}"
                    }
                }
            }
        }

        stage('Done') {
            steps {
                echo '✅ Cały pipeline zakończony.'
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: "${WORKDIR}/artifacts/xz.tar.gz", allowEmptyArchive: true
            archiveArtifacts artifacts: "${WORKDIR}/logs/test_results.log", allowEmptyArchive: true
        }
    }
}
