pipeline {
    agent any

    environment {
        WORKDIR     = "pipeline"
        IMG_BUILD   = "xz-build"
        IMG_TEST    = "xz-test"
        IMG_DEPLOY  = "xz-deploy"
        ARTIFACT    = "xz.tar.gz"
    }

    stages {
        stage("Clone xz") {
            steps {
                dir(WORKDIR) {
                    sh '''
                      rm -rf xz
                      git clone https://github.com/tukaani-project/xz.git
                    '''
                }
            }
        }

        stage("Build") {
            steps {
                dir(WORKDIR) {
                    script {
                        // Budujemy obraz, w którym Dockerfile.build SAM przenosi xz-*.tar.gz → /app/xz.tar.gz
                        docker.build(IMG_BUILD, "-f Dockerfile.build .")
                        def cid = sh(script: "docker create ${IMG_BUILD}", returnStdout: true).trim()
                        sh "mkdir -p artifacts"
                        // Kopiujemy już ujednolicony artifact
                        sh "docker cp ${cid}:/app/${ARTIFACT} artifacts/${ARTIFACT}"
                        sh "docker rm ${cid}"
                    }
                }
            }
        }

        stage("Test") {
            steps {
                dir(WORKDIR) {
                    script {
                        docker.build(IMG_TEST, "-f Dockerfile.test .")
                        def cid = sh(script: "docker create ${IMG_TEST}", returnStdout: true).trim()
                        sh "mkdir -p logs"
                        sh "docker cp ${cid}:/app/logs/test_results.log logs/test_results.log"
                        sh "docker rm ${cid}"
                    }
                }
            }
        }

        stage("Deploy") {
            steps {
                dir(WORKDIR) {
                    script {
                        docker.build(IMG_DEPLOY, "-f Dockerfile.deploy .")
                        def cid = sh(script: "docker create ${IMG_DEPLOY}", returnStdout: true).trim()
                        sh "docker cp deploy.c ${cid}:/app/deploy.c"
                        sh "docker start ${cid}"
                        sh """
                          docker exec ${cid} bash -lc '
                            gcc /app/deploy.c -lxz -o /tmp/deploy_test && \
                            /tmp/deploy_test
                          '
                        """
                        sh "docker rm -f ${cid}"
                    }
                }
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: "${WORKDIR}/artifacts/${ARTIFACT}", fingerprint: true
            archiveArtifacts artifacts: "${WORKDIR}/logs/test_results.log", allowEmptyArchive: true
        }
    }
}
