pipeline {
    agent any

    environment {
        WORKDIR = "INO/GCL02/FR417273/Sprawozdanie2/coursework/pipeline"
        VERSION = "1.0.0"
    }

    stages {
        stage('Build') {
            steps {
                dir("${WORKDIR}") {
                    script {
                        // Build building image
                        def buildImage = docker.build("cj-build:${VERSION}", '-f Dockerfile.build .')

                        // Create dir for artifacts
                        sh 'mkdir -p artifacts'

                        // Run build container
                        def buildContainer = sh(script: "docker create cj-build:${VERSION}", returnStdout: true).trim()

                        // Copy artifacts & remove container
                        sh "docker cp ${buildContainer}:/app/cJSON/build/output/cjson.rpm artifacts/cjson-${VERSION}.rpm"
                        sh "docker rm ${buildContainer}"
                    }
                }
            }
        }

        stage('Test') {
            steps {
                dir("${WORKDIR}") {
                    script {
                        // Build test container
                        def testImage = docker.build("cj-test:${VERSION}", '-f Dockerfile.test .')

                        // Create logs dir
                        sh 'mkdir -p logs'

                        // Run test container
                        def testContainer = sh(script: "docker create cj-test:${VERSION}", returnStdout: true).trim()

                        // Copy test results & remove the container
                        sh "docker cp ${testContainer}:/app/cJSON/logs/test_results.log logs/test_results.log"
                        sh "docker rm ${testContainer}"
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                dir("${WORKDIR}") {
                    script {
                        // Build deploy container
                        def deployImage = docker.build("cj-deploy:${VERSION}", '-f Dockerfile.deploy .')

                        // Run container
                        def deployContainer = sh(script: "docker create cj-deploy:${VERSION}", returnStdout: true).trim()

                        // Copy .rpm and deploy.c into the container and install
                        sh "docker cp artifacts/cjson-${VERSION}.rpm ${deployContainer}:/tmp/cjson.rpm"
                        sh "docker cp deploy.c ${deployContainer}:/app/deploy.c"
                        sh "docker start ${deployContainer}"
                        sh "docker exec ${deployContainer} dnf install -y /tmp/cjson.rpm"

                        // Compile deploy.c and verify lib's compilation
                        sh "docker exec ${deployContainer} gcc /app/deploy.c -lcjson -o /tmp/deploy_test"
                        sh "docker exec ${deployContainer} /tmp/deploy_test"

                        // Remove the container
                        sh "docker rm -f ${deployContainer}"
                    }
                }
            }
        }

        stage('Print') {
            steps {
                echo "Pipeline finished successfully for version ${VERSION}."
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: "${WORKDIR}/artifacts/cjson-${VERSION}.rpm", allowEmptyArchive: true
            archiveArtifacts artifacts: "${WORKDIR}/logs/test_results-${VERSION}.log", allowEmptyArchive: true
        }
    }
}
