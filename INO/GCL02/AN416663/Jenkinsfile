pipeline {
    agent any

    environment {
        WORKDIR = "INO/GCL02/AN416663/pipeline"
    }

    stages {
        stage('Clone xz') {
            steps {
                dir("${WORKDIR}") {
                    sh "rm -rf xz"
                    sh "git clone https://github.com/tukaani-project/xz.git xz"
                }
            }
        }

        stage('Build & Package') {
            steps {
                dir("${WORKDIR}") {
                    script {
                        docker.build('xz-build', '-f Dockerfile.build .')
                        sh 'mkdir -p artifacts'
                        def cid = sh(script: "docker create xz-build", returnStdout: true).trim()
                        sh "docker cp ${cid}:/app/xz.tar.gz artifacts/xz.tar.gz"
                        sh "docker rm ${cid}"
                    }
                }
            }
        }

        stage('Test') {
            steps {
                dir("${WORKDIR}") {
                    script {
                        docker.build('xz-test', '-f Dockerfile.test .')
                        sh 'mkdir -p logs'
                        def cid = sh(script: "docker create xz-test", returnStdout: true).trim()
                        sh "docker cp ${cid}:/app/logs/test_results.log logs/xz_test.log"
                        sh "docker rm ${cid}"
                    }
                }
            }
        }

stage('Deploy') {
    steps {
        dir("${WORKDIR}") {
            script {
                withEnv(["DEPLOY_IMAGE=xz-deploy"]) {
                    sh 'docker build -t $DEPLOY_IMAGE -f ../../../../Dockerfile.deploy .'
                    sh 'docker run -d --name xz-deploy $DEPLOY_IMAGE tail -f /dev/null'
                    sh 'docker cp artifacts/xz.tar.gz xz-deploy:/tmp/xz.tar.gz'
                    sh 'docker cp deploy.c xz-deploy:/app/deploy.c'
                    sh 'docker exec xz-deploy tar -xzf /tmp/xz.tar.gz -C /tmp'
                    sh 'docker exec xz-deploy sh -c "cd /tmp/xz && gcc /app/deploy.c -llzma -o /app/xz-deploy-bin"'
                    sh 'mkdir -p deploy-out'
                    sh 'docker cp xz-deploy:/app/xz-deploy-bin ./deploy-out/xz-deploy-bin'
                    sh 'docker stop xz-deploy && docker rm xz-deploy'
                }
            }
        }
    }
}

        stage('Print') {
            steps {
                echo 'Pipeline dla xz zakończony pomyślnie.'
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: 'INO/GCL02/AN416663/pipeline/artifacts/xz.tar.gz'
            archiveArtifacts artifacts: 'INO/GCL02/AN416663/pipeline/logs/xz_test.log'
        }
    }
}